// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id          Int        @id @default(autoincrement())
  email       String     @unique
  name        String
  password    String
  roleId      Int
  dispensaryId Int?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  role        Role       @relation(fields: [roleId], references: [id])
  dispensary  Dispensary @relation(fields: [dispensaryId], references: [id])
  auditLogs   AuditLog[]
}

model Role {
  id    Int    @id @default(autoincrement())
  name  String @unique
  users User[]
}

model Dispensary {
  id      Int    @id @default(autoincrement())
  name    String
  license String @unique
  users   User[]
}

model AuditLog {
  id            Int       @id @default(autoincrement())
  tenantId      Int
  userId        Int?
  user          User?     @relation(fields: [userId], references: [id])


  // What happened
  action        AuditAction                                                       // e.g. "CREATE","UPDATE","DELETE","LOGIN","EXPORT"
  entityType    String    @db.VarChar(40) // or enum if stable                    // e.g. "Product","Batch","Order","User","License"
  entityId      String    @db.VarChar(64) // UUID/GUID/external ID                
  result        AuditResult                                                       // "SUCCESS" | "FAIL"
  error         Json?                                                             // message if FAIL; keep brief, details in before/after diff if needed


  // Before/After as JSON allows storing rich diffs/snapshots without schema churn
  before        Json?
  after         Json?


  // Request context
  timestamp     DateTime  @default(now())
  ipAddress     String?   @db.Inet
  userAgent     String?   @db.Text
  source        LogSource


  // Free-form metadata (labels, tags, reason, etc.)
  meta         Json?

  correlationId String?   @db.Uuid


  // Most often will slice by tenant + time, tenant + action, tenant + entity, or tenant + user
  @@index([tenantId, timestamp(sort: Desc)])                                      // <-- crucial for tenant-scoped pagination
  @@index([tenantId, action, timestamp(sort: Desc)])
  @@index([tenantId, entityType, entityId])
  @@index([tenantId, userId, timestamp(sort: Desc)])
  @@index([requestId])

  @@index([entityType, entityId, timestamp])
  @@index([action, timestamp])
  @@index([result, timestamp])
}

enum AuditAction {
  CREATE
  READ
  UPDATE
  DELETE
  LOGIN
  LOGOUT
  EXPORT
  IMPORT
  APPROVE
  REJECT
  SYNC
  BULK_UPDATE
}

enum AuditResult {
  SUCCESS
  FAILURE
  DENIED
  PARTIAL
  QUEUED
  RETRY
}

enum LogSource {
  WEB
  API
  MOBILE
  WORKER
  CRON
  WEBHOOK
  INTEGRATION_METRC
  INTEGRATION_ISOLOCITY
}
